/****************************************************************************
** Meta object code from reading C++ file 'galaxytest.cc'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.6.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'galaxytest.cc' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.6.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_GalaxyTest_t {
    QByteArrayData data[16];
    char stringdata0[322];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_GalaxyTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_GalaxyTest_t qt_meta_stringdata_GalaxyTest = {
    {
QT_MOC_LITERAL(0, 0, 10), // "GalaxyTest"
QT_MOC_LITERAL(1, 11, 4), // "init"
QT_MOC_LITERAL(2, 16, 0), // ""
QT_MOC_LITERAL(3, 17, 15), // "testConstructor"
QT_MOC_LITERAL(4, 33, 23), // "testAddSingleStarSystem"
QT_MOC_LITERAL(5, 57, 26), // "testAddDuplicateStarSystem"
QT_MOC_LITERAL(6, 84, 32), // "testGetRandomSystemWithOneSystem"
QT_MOC_LITERAL(7, 117, 27), // "testGetRandomSystemMultiple"
QT_MOC_LITERAL(8, 145, 23), // "testGetStarSystemByName"
QT_MOC_LITERAL(9, 169, 21), // "testGetStarSystemById"
QT_MOC_LITERAL(10, 191, 21), // "testGetSystemsInRange"
QT_MOC_LITERAL(11, 213, 17), // "testAddSingleShip"
QT_MOC_LITERAL(12, 231, 23), // "testAddingDuplicateShip"
QT_MOC_LITERAL(13, 255, 22), // "testSingleShipInSystem"
QT_MOC_LITERAL(14, 278, 26), // "testShipsInMultipleSystems"
QT_MOC_LITERAL(15, 305, 16) // "testRemovingShip"

    },
    "GalaxyTest\0init\0\0testConstructor\0"
    "testAddSingleStarSystem\0"
    "testAddDuplicateStarSystem\0"
    "testGetRandomSystemWithOneSystem\0"
    "testGetRandomSystemMultiple\0"
    "testGetStarSystemByName\0testGetStarSystemById\0"
    "testGetSystemsInRange\0testAddSingleShip\0"
    "testAddingDuplicateShip\0testSingleShipInSystem\0"
    "testShipsInMultipleSystems\0testRemovingShip"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_GalaxyTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      14,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   84,    2, 0x08 /* Private */,
       3,    0,   85,    2, 0x08 /* Private */,
       4,    0,   86,    2, 0x08 /* Private */,
       5,    0,   87,    2, 0x08 /* Private */,
       6,    0,   88,    2, 0x08 /* Private */,
       7,    0,   89,    2, 0x08 /* Private */,
       8,    0,   90,    2, 0x08 /* Private */,
       9,    0,   91,    2, 0x08 /* Private */,
      10,    0,   92,    2, 0x08 /* Private */,
      11,    0,   93,    2, 0x08 /* Private */,
      12,    0,   94,    2, 0x08 /* Private */,
      13,    0,   95,    2, 0x08 /* Private */,
      14,    0,   96,    2, 0x08 /* Private */,
      15,    0,   97,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void GalaxyTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        GalaxyTest *_t = static_cast<GalaxyTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->testConstructor(); break;
        case 2: _t->testAddSingleStarSystem(); break;
        case 3: _t->testAddDuplicateStarSystem(); break;
        case 4: _t->testGetRandomSystemWithOneSystem(); break;
        case 5: _t->testGetRandomSystemMultiple(); break;
        case 6: _t->testGetStarSystemByName(); break;
        case 7: _t->testGetStarSystemById(); break;
        case 8: _t->testGetSystemsInRange(); break;
        case 9: _t->testAddSingleShip(); break;
        case 10: _t->testAddingDuplicateShip(); break;
        case 11: _t->testSingleShipInSystem(); break;
        case 12: _t->testShipsInMultipleSystems(); break;
        case 13: _t->testRemovingShip(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject GalaxyTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_GalaxyTest.data,
      qt_meta_data_GalaxyTest,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *GalaxyTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *GalaxyTest::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_GalaxyTest.stringdata0))
        return static_cast<void*>(const_cast< GalaxyTest*>(this));
    return QObject::qt_metacast(_clname);
}

int GalaxyTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 14)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 14;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 14)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 14;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
